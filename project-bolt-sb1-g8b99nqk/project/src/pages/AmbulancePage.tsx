import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Truck, MapPin, Phone, Clock, Star, Send, Mic, MicOff, Loader2, User, Bot, Navigation, Search, Filter, Heart, Snowflake, Activity, AlertTriangle, Play, Volume2, ThumbsUp, ThumbsDown, Share2, Copy, CheckCircle, X, Plus, Calendar, Users, Shield } from 'lucide-react';
import { generateHealthResponse } from '../utils/geminiApi';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  type: 'text' | 'voice';
}

interface AmbulanceService {
  id: number;
  name: string;
  phone: string;
  district: string;
  area: string;
  available24x7: boolean;
  types: string[];
  rating: number;
  responseTime: string;
  price: string;
  verified: boolean;
}

interface BookingForm {
  name: string;
  phone: string;
  address: string;
  ambulanceType: string;
  patientCondition: string;
  urgency: string;
  notes: string;
}

const AmbulancePage: React.FC = () => {
  const [userLocation, setUserLocation] = useState<{lat: number, lng: number, address: string} | null>(null);
  const [isGettingLocation, setIsGettingLocation] = useState(false);
  const [locationShared, setLocationShared] = useState(false);
  const [shareMessage, setShareMessage] = useState('');
  const [selectedDistrict, setSelectedDistrict] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showBookingForm, setShowBookingForm] = useState(false);
  const [bookingSubmitted, setBookingSubmitted] = useState(false);
  const [feedback, setFeedback] = useState<{rating: number, comment: string} | null>(null);
  const [showAddAmbulanceModal, setShowAddAmbulanceModal] = useState(false);
  const [newAmbulance, setNewAmbulance] = useState({
    name: '',
    phone: '',
    area: '',
    type: 'Regular',
    price: '',
    available24: true,
    rating: 4.5,
    responseTime: 'рззрзл-рзирзж ржорж┐ржирж┐ржЯ'
  });
  
  const [bookingForm, setBookingForm] = useState<BookingForm>({
    name: '',
    phone: '',
    address: '',
    ambulanceType: '',
    patientCondition: '',
    urgency: 'ржЬрж░рзБрж░рж┐',
    notes: ''
  });

  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: `ржЖрж╕рзНрж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо! ржЖржорж┐ AmbulanceBotред ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛ ржЦрзБржБржЬрзЗ ржжрж┐рждрзЗ ржкрж╛рж░рж┐ред ржЖржкржирж┐ ржмрж▓рждрзЗ ржкрж╛рж░рзЗржи "ржЖржорж╛рж░ ржПрж▓рж╛ржХрж╛ржпрж╝ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж▓рж╛ржЧржмрзЗ" ржмрж╛ "ржврж╛ржХрж╛ ржорзЗржбрж┐ржХрзЗрж▓рзЗрж░ ржЬржирзНржп ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржЪрж╛ржЗ"ред ржЖржорж┐ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржмред`,
      sender: 'bot',
      timestamp: new Date(),
      type: 'text'
    }
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const recordingIntervalRef = useRef<NodeJS.Timeout | null>(null);

  const districts = [
    'ржврж╛ржХрж╛', 'ржЪржЯрзНржЯржЧрзНрж░рж╛ржо', 'рж░рж╛ржЬрж╢рж╛рж╣рзА', 'рж╕рж┐рж▓рзЗржЯ', 'ржЦрзБрж▓ржирж╛', 'ржмрж░рж┐рж╢рж╛рж▓', 'рж░ржВржкрзБрж░', 'ржоржпрж╝ржоржирж╕рж┐ржВрж╣'
  ];

  const ambulanceTypes = [
    {
      type: 'Regular Ambulance',
      icon: 'ЁЯЪР',
      description: 'рж╕рж╛ржзрж╛рж░ржг рж░рзЛржЧрзА ржкрж░рж┐ржмрж╣ржирзЗрж░ ржЬржирзНржп',
      features: ['ржмрзЗрж╕рж┐ржХ ржорзЗржбрж┐ржХрзЗрж▓ рж╕рж░ржЮрзНржЬрж╛ржо', 'ржЕржХрзНрж╕рж┐ржЬрзЗржи рж╕рж┐рж▓рж┐ржирзНржбрж╛рж░', 'рж╕рзНржЯрзНрж░рзЗржЪрж╛рж░'],
      price: 'рзлрзжрзж-рззрзжрзжрзж ржЯрж╛ржХрж╛',
      color: 'from-blue-500 to-cyan-500'
    },
    {
      type: 'AC Ambulance',
      icon: 'тЭДя╕П',
      description: 'рж╢рзАрждрж╛рждржк ржирж┐ржпрж╝ржирзНрждрзНрж░рж┐ржд ржПржорзНржмрзБрж▓рзЗржирзНрж╕',
      features: ['ржПржпрж╝рж╛рж░ ржХржирзНржбрж┐рж╢ржи', 'ржХржоржлрзЛрж░рзНржЯ рж╕рж┐ржЯ', 'ржкрж░рж┐рж╖рзНржХрж╛рж░ ржкрж░рж┐ржмрзЗрж╢'],
      price: 'рззрзжрзжрзж-рззрзлрзжрзж ржЯрж╛ржХрж╛',
      color: 'from-cyan-500 to-blue-500'
    },
    {
      type: 'ICU/CCU Ambulance',
      icon: 'тЭдя╕ПтАНЁЯй╣',
      description: 'ржЧрзБрж░рзБрждрж░ рж░рзЛржЧрзАрж░ ржЬржирзНржп',
      features: ['ржнрзЗржирзНржЯрж┐рж▓рзЗржЯрж░', 'ржХрж╛рж░рзНржбрж┐ржпрж╝рж╛ржХ ржоржирж┐ржЯрж░', 'ржбрж┐ржлрж┐ржмрзНрж░рж┐рж▓рзЗржЯрж░', 'ржкрзНрж░рж╢рж┐ржХрзНрж╖рж┐ржд ржирж╛рж░рзНрж╕'],
      price: 'рзирзжрзжрзж-рзлрзжрзжрзж ржЯрж╛ржХрж╛',
      color: 'from-red-500 to-pink-500'
    },
    {
      type: 'Dead Body Freezer Van',
      icon: 'тЪ░я╕П',
      description: 'ржорзГрждржжрзЗрж╣ ржкрж░рж┐ржмрж╣ржирзЗрж░ ржЬржирзНржп',
      features: ['ржлрзНрж░рж┐ржЬрж╛рж░ рж╕рзБржмрж┐ржзрж╛', 'рж╕ржорзНржорж╛ржиржЬржиржХ ржкрж░рж┐ржмрж╣ржи', 'ржкрж░рж┐ржмрж╛рж░ рж╕рж╣рж╛ржпрж╝рждрж╛'],
      price: 'рззрзлрзжрзж-рзйрзжрзжрзж ржЯрж╛ржХрж╛',
      color: 'from-gray-500 to-slate-500'
    }
  ];

  const ambulanceServices: AmbulanceService[] = [
    {
      id: 1,
      name: 'ржврж╛ржХрж╛ ржорзЗржбрж┐ржХрзЗрж▓ ржПржорзНржмрзБрж▓рзЗржирзНрж╕',
      phone: 'рзжрззрзнрззрзирзйрзкрзлрзмрзнрзо',
      district: 'ржврж╛ржХрж╛',
      area: 'ржзрж╛ржиржоржирзНржбрж┐, ржирж┐ржЙржорж╛рж░рзНржХрзЗржЯ',
      available24x7: true,
      types: ['Regular', 'AC', 'ICU'],
      rating: 4.8,
      responseTime: 'рззрзж-рззрзл ржорж┐ржирж┐ржЯ',
      price: 'рзлрзжрзж-рзирзжрзжрзж ржЯрж╛ржХрж╛',
      verified: true
    },
    {
      id: 2,
      name: 'рж░рзЗржб ржХрзНрж░рж┐рж╕рзЗржирзНржЯ ржПржорзНржмрзБрж▓рзЗржирзНрж╕',
      phone: 'рзжрззрзорзорзнрзмрзлрзкрзгрзирзз',
      district: 'ржврж╛ржХрж╛',
      area: 'ржорж┐рж░ржкрзБрж░, ржЙрждрзНрждрж░рж╛',
      available24x7: true,
      types: ['Regular', 'ICU', 'Freezer'],
      rating: 4.9,
      responseTime: 'рзо-рззрзи ржорж┐ржирж┐ржЯ',
      price: 'рзкрзжрзж-рззрзорзжрзж ржЯрж╛ржХрж╛',
      verified: true
    },
    {
      id: 3,
      name: 'ржЪржЯрзНржЯржЧрзНрж░рж╛ржо ржорзЗржбрж┐ржХрзЗрж▓ ржПржорзНржмрзБрж▓рзЗржирзНрж╕',
      phone: 'рзжрззрзпрзпрзорзорзнрзнрзмрзмрзл',
      district: 'ржЪржЯрзНржЯржЧрзНрж░рж╛ржо',
      area: 'ржЖржЧрзНрж░рж╛ржмрж╛ржж, ржирж╛рж╕рж┐рж░рж╛ржмрж╛ржж',
      available24x7: true,
      types: ['Regular', 'AC'],
      rating: 4.6,
      responseTime: 'рззрзл-рзирзж ржорж┐ржирж┐ржЯ',
      price: 'рзмрзжрзж-рззрзирзжрзж ржЯрж╛ржХрж╛',
      verified: true
    },
    {
      id: 4,
      name: 'рж╕рж┐рж▓рзЗржЯ ржЬрзЗржирж╛рж░рзЗрж▓ ржПржорзНржмрзБрж▓рзЗржирзНрж╕',
      phone: 'рзжрззрзлрзлрзкрзкрзйрзйрзирзирзз',
      district: 'рж╕рж┐рж▓рзЗржЯ',
      area: 'ржЬрж┐ржирзНржжрж╛ржмрж╛ржЬрж╛рж░, ржЖржорзНржмрж░ржЦрж╛ржирж╛',
      available24x7: false,
      types: ['Regular', 'AC'],
      rating: 4.4,
      responseTime: 'рзирзж-рзирзл ржорж┐ржирж┐ржЯ',
      price: 'рзнрзжрзж-рззрзлрзжрзж ржЯрж╛ржХрж╛',
      verified: false
    },
    {
      id: 5,
      name: 'рж░рж╛ржЬрж╢рж╛рж╣рзА ржорзЗржбрж┐ржХрзЗрж▓ ржПржорзНржмрзБрж▓рзЗржирзНрж╕',
      phone: 'рзжрззрзмрзмрзлрзлрзкрзкрзйрзйрзи',
      district: 'рж░рж╛ржЬрж╢рж╛рж╣рзА',
      area: 'рж╕рж╛рж╣рзЗржм ржмрж╛ржЬрж╛рж░, рж░рзЗрж▓ржУржпрж╝рзЗ',
      available24x7: true,
      types: ['Regular', 'ICU'],
      rating: 4.7,
      responseTime: 'рззрзи-рззрзо ржорж┐ржирж┐ржЯ',
      price: 'рзлрзлрзж-рзирзирзжрзж ржЯрж╛ржХрж╛',
      verified: true
    },
    {
      id: 6,
      name: 'ржЦрзБрж▓ржирж╛ рж╕рж┐ржЯрж┐ ржПржорзНржмрзБрж▓рзЗржирзНрж╕',
      phone: 'рзжрззрзнрзнрзмрзмрзлрзлрзкрзкрзй',
      district: 'ржЦрзБрж▓ржирж╛',
      area: 'рж░ржпрж╝рзЗрж▓, рж╕рзЛржирж╛ржбрж╛ржЩрзНржЧрж╛',
      available24x7: true,
      types: ['Regular', 'AC', 'Freezer'],
      rating: 4.5,
      responseTime: 'рззрзл-рзирзи ржорж┐ржирж┐ржЯ',
      price: 'рзмрзлрзж-рззрзорзжрзж ржЯрж╛ржХрж╛',
      verified: true
    }
  ];

  const emergencyTips = [
    {
      title: 'рзпрзпрзп-ржП ржХрж▓ ржХрж░рж╛рж░ ржирж┐ржпрж╝ржо',
      tips: ['рж╢рж╛ржирзНржд ржерж╛ржХрзБржи', 'рж╕рзНржкрж╖рзНржЯ ржХрж░рзЗ ржмрж▓рзБржи', 'ржарж┐ржХрж╛ржирж╛ ржжрж┐ржи', 'рж░рзЛржЧрзАрж░ ржЕржмрж╕рзНржерж╛ ржмрж░рзНржгржирж╛ ржХрж░рзБржи'],
      icon: Phone,
      color: 'from-red-500 to-orange-500'
    },
    {
      title: 'ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржЖрж╕рж╛рж░ ржЖржЧрзЗ',
      tips: ['рж░рзЛржЧрзАржХрзЗ ржирж┐рж░рж╛ржкржж рж░рж╛ржЦрзБржи', 'рж╢рзНржмрж╛рж╕ржкрже ржкрж░рж┐рж╖рзНржХрж╛рж░ рж░рж╛ржЦрзБржи', 'рж░ржХрзНрждржХрзНрж╖рж░ржг ржмржирзНржз ржХрж░рзБржи', 'ржЬрж░рзБрж░рж┐ ржХрж╛ржЧржЬржкрждрзНрж░ ржкрзНрж░рж╕рзНрждрзБржд рж░рж╛ржЦрзБржи'],
      icon: Heart,
      color: 'from-green-500 to-emerald-500'
    },
    {
      title: 'ржЬрзНржпрж╛ржорзЗ ржлрзЗржБрж╕рзЗ ржЧрзЗрж▓рзЗ',
      tips: ['ржмрж┐ржХрж▓рзНржк рж░рж╛рж╕рзНрждрж╛ ржЦрзЛржБржЬрзБржи', 'ржЯрзНрж░рж╛ржлрж┐ржХ ржкрзБрж▓рж┐рж╢ржХрзЗ ржЬрж╛ржирж╛ржи', 'рж╣рж░рзНржи ржмрж╛ржЬрж╛ржи', 'ржЬрж░рзБрж░рж┐ рж▓рзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи'],
      icon: AlertTriangle,
      color: 'from-yellow-500 to-orange-500'
    }
  ];

  const videoGuides = [
    {
      title: 'ржХрзАржнрж╛ржмрзЗ рзпрзпрзп-ржП ржХрж▓ ржХрж░ржмрзЗржи?',
      duration: 'рзи:рзйрзж',
      thumbnail: 'ЁЯУЮ',
      description: 'ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ржпрж╝ рж╕ржарж┐ржХ рждржерзНржп ржжрж┐ржпрж╝рзЗ ржХрж▓ ржХрж░рж╛рж░ ржкржжрзНржзрждрж┐'
    },
    {
      title: 'ржкрзНрж░рж╛ржержорж┐ржХ ржЪрж┐ржХрж┐рзОрж╕рж╛',
      duration: 'рзл:рззрзл',
      thumbnail: 'ЁЯй╣',
      description: 'ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржЖрж╕рж╛рж░ ржЖржЧрзЗ ржХрж░ржгрзАржпрж╝ ржкрзНрж░рж╛ржержорж┐ржХ ржЪрж┐ржХрж┐рзОрж╕рж╛'
    },
    {
      title: 'ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржЯрж╛ржЗржк ржЪрзЗржирж╛рж░ ржЙржкрж╛ржпрж╝',
      duration: 'рзй:рзкрзл',
      thumbnail: 'ЁЯЪР',
      description: 'ржХрзЛржи ржЕржмрж╕рзНржерж╛ржпрж╝ ржХрзЛржи ржзрж░ржирзЗрж░ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржжрж░ржХрж╛рж░'
    }
  ];

  const filteredServices = ambulanceServices.filter(service => {
    const matchesDistrict = selectedDistrict === 'all' || service.district === selectedDistrict;
    const matchesSearch = service.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         service.area.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesDistrict && matchesSearch;
  });

  const handleSubmitAmbulance = () => {
    if (!newAmbulance.name || !newAmbulance.phone || !newAmbulance.area || !newAmbulance.price) {
      alert('рж╕ржм ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рждржерзНржп ржкрзВрж░ржг ржХрж░рзБржи');
      return;
    }

    const ambulance = {
      id: ambulanceServices.length + 1,
      name: newAmbulance.name,
      phone: newAmbulance.phone,
      area: newAmbulance.area,
      type: newAmbulance.type,
      price: newAmbulance.price,
      available24: newAmbulance.available24,
      rating: newAmbulance.rating,
      responseTime: newAmbulance.responseTime,
      verified: false
    };

    setAmbulanceServices(prev => [ambulance, ...prev]);
    setNewAmbulance({
      name: '',
      phone: '',
      area: '',
      type: 'Regular',
      price: '',
      available24: true,
      rating: 4.5,
      responseTime: 'рззрзл-рзирзж ржорж┐ржирж┐ржЯ'
    });
    setShowAddAmbulanceModal(false);
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const generateResponse = async (userMessage: string) => {
    setIsLoading(true);
    
    try {
      // Custom responses for ambulance-related queries
      let response = '';
      const lowerMessage = userMessage.toLowerCase();
      
      if (lowerMessage.includes('ржПржорзНржмрзБрж▓рзЗржирзНрж╕') || lowerMessage.includes('ambulance')) {
        if (lowerMessage.includes('ржврж╛ржХрж╛')) {
          response = `ржврж╛ржХрж╛ржпрж╝ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛:\n\nЁЯЪР ржврж╛ржХрж╛ ржорзЗржбрж┐ржХрзЗрж▓ ржПржорзНржмрзБрж▓рзЗржирзНрж╕\nЁЯУЮ рзжрззрзнрззрзирзйрзкрзлрзмрзнрзо\nтнР рж░рзЗржЯрж┐ржВ: рзк.рзо/рзл\nтП░ рж░рзЗрж╕ржкржирзНрж╕ ржЯрж╛ржЗржо: рззрзж-рззрзл ржорж┐ржирж┐ржЯ\nЁЯТ░ ржорзВрж▓рзНржп: рзлрзжрзж-рзирзжрзжрзж ржЯрж╛ржХрж╛\n\nЁЯЪР рж░рзЗржб ржХрзНрж░рж┐рж╕рзЗржирзНржЯ ржПржорзНржмрзБрж▓рзЗржирзНрж╕\nЁЯУЮ рзжрззрзорзорзнрзмрзлрзкрзйрзирзз\nтнР рж░рзЗржЯрж┐ржВ: рзк.рзп/рзл\nтП░ рж░рзЗрж╕ржкржирзНрж╕ ржЯрж╛ржЗржо: рзо-рззрзи ржорж┐ржирж┐ржЯ\nЁЯТ░ ржорзВрж▓рзНржп: рзкрзжрзж-рззрзорзжрзж ржЯрж╛ржХрж╛\n\nржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ржпрж╝ рзпрзпрзп ржиржорзНржмрж░рзЗ ржХрж▓ ржХрж░рзБржиред`;
        } else if (lowerMessage.includes('ржЪржЯрзНржЯржЧрзНрж░рж╛ржо')) {
          response = `ржЪржЯрзНржЯржЧрзНрж░рж╛ржорзЗ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛:\n\nЁЯЪР ржЪржЯрзНржЯржЧрзНрж░рж╛ржо ржорзЗржбрж┐ржХрзЗрж▓ ржПржорзНржмрзБрж▓рзЗржирзНрж╕\nЁЯУЮ рзжрззрзпрзпрзорзорзнрзнрзмрзмрзл\nтнР рж░рзЗржЯрж┐ржВ: рзк.рзм/рзл\nтП░ рж░рзЗрж╕ржкржирзНрж╕ ржЯрж╛ржЗржо: рззрзл-рзирзж ржорж┐ржирж┐ржЯ\nЁЯТ░ ржорзВрж▓рзНржп: рзмрзжрзж-рззрзирзжрзж ржЯрж╛ржХрж╛\n\nржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ржпрж╝ рзпрзпрзп ржиржорзНржмрж░рзЗ ржХрж▓ ржХрж░рзБржиред`;
        } else {
          response = `ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛рж░ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛ ржЦрзБржБржЬрзЗ ржжрж┐ржЪрзНржЫрж┐...\n\nЁЯЪи ржЬрж░рзБрж░рж┐ ржиржорзНржмрж░: рзпрзпрзп\nЁЯПе рж╕рзНржмрж╛рж╕рзНржерзНржп ржмрж╛рждрж╛ржпрж╝ржи: рззрзмрзирзмрзй\n\nржирж┐ржЪрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛рж░ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛ ржжрзЗржЦрзБржиред ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ ржЖржкржирж╛рж░ рж▓рзЛржХрзЗрж╢ржи рж╢рзЗржпрж╝рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи ржирж┐ржХржЯрж╕рзНрже рж╕рзЗржмрж╛ ржкрзЗрждрзЗред`;
        }
      } else {
        // Use Gemini API for other queries
        response = await generateHealthResponse(userMessage, 'general-health');
      }
      
      const botMessage: Message = {
        id: Date.now().toString(),
        text: response,
        sender: 'bot',
        timestamp: new Date(),
        type: 'text'
      };
      
      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      const errorMessage: Message = {
        id: Date.now().toString(),
        text: 'ржжрзБржГржЦрж┐ржд, ржХрж┐ржЫрзБ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
        sender: 'bot',
        timestamp: new Date(),
        type: 'text'
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSendMessage = async () => {
    if (!input.trim()) return;
    
    const userMessage: Message = {
      id: Date.now().toString(),
      text: input,
      sender: 'user',
      timestamp: new Date(),
      type: 'text'
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    await generateResponse(input);
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      
      mediaRecorder.start();
      setIsRecording(true);
      setRecordingTime(0);
      
      recordingIntervalRef.current = setInterval(() => {
        setRecordingTime(prev => prev + 1);
      }, 1000);
      
      mediaRecorder.ondataavailable = (e) => {
        if (e.data.size > 0) {
          const userMessage: Message = {
            id: Date.now().toString(),
            text: 'ржнржпрж╝рзЗрж╕ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж┐ржпрж╝рзЗржЫрж┐',
            sender: 'user',
            timestamp: new Date(),
            type: 'voice'
          };
          
          setMessages(prev => [...prev, userMessage]);
          generateResponse('ржЖржорж┐ ржПржХржЯрж┐ ржнржпрж╝рзЗрж╕ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж┐ржпрж╝рзЗржЫрж┐ред ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржкрж░рж╛ржорж░рзНрж╢ ржжрж┐ржиред');
        }
      };
    } catch (error) {
      console.error('Error starting recording:', error);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());
      setIsRecording(false);
      setRecordingTime(0);
      
      if (recordingIntervalRef.current) {
        clearInterval(recordingIntervalRef.current);
      }
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getCurrentLocation = () => {
    setIsGettingLocation(true);
    
    if (!navigator.geolocation) {
      alert('ржЖржкржирж╛рж░ ржмрзНрж░рж╛ржЙржЬрж╛рж░ ржЬрж┐ржУрж▓рзЛржХрзЗрж╢ржи рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗ ржирж╛');
      setIsGettingLocation(false);
      return;
    }

    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const { latitude, longitude } = position.coords;
        
        try {
          const mockAddress = `${latitude.toFixed(6)}, ${longitude.toFixed(6)} (ржЖржирзБржорж╛ржирж┐ржХ ржарж┐ржХрж╛ржирж╛)`;
          
          setUserLocation({
            lat: latitude,
            lng: longitude,
            address: mockAddress
          });
          
          setIsGettingLocation(false);
        } catch (error) {
          console.error('Error getting address:', error);
          setUserLocation({
            lat: latitude,
            lng: longitude,
            address: `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`
          });
          setIsGettingLocation(false);
        }
      },
      (error) => {
        console.error('Error getting location:', error);
        alert('рж▓рзЛржХрзЗрж╢ржи ржкрзЗрждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред');
        setIsGettingLocation(false);
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 60000
      }
    );
  };

  const shareLocation = () => {
    if (!userLocation) return;
    
    const locationText = `ЁЯЪи ржЬрж░рзБрж░рж┐ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржкрзНрж░ржпрж╝рзЛржЬржи!\nЁЯУН ржЖржорж╛рж░ ржЕржмрж╕рзНржерж╛ржи: ${userLocation.address}\nЁЯМР Google Maps: https://maps.google.com/?q=${userLocation.lat},${userLocation.lng}\n\nржжржпрж╝рж╛ ржХрж░рзЗ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржкрж╛ржарж╛ржи!`;
    
    setShareMessage(locationText);
    setLocationShared(true);
    
    navigator.clipboard.writeText(locationText).then(() => {
      if (navigator.share) {
        navigator.share({
          title: 'ржЬрж░рзБрж░рж┐ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржкрзНрж░ржпрж╝рзЛржЬржи',
          text: locationText
        });
      }
    });
  };

  const copyLocationText = () => {
    if (shareMessage) {
      navigator.clipboard.writeText(shareMessage).then(() => {
        alert('рж▓рзЛржХрзЗрж╢ржи ржХржкрж┐ рж╣ржпрж╝рзЗржЫрзЗ! ржПржЦржи ржпрзЗржХрзЛржирзЛ ржЬрж╛ржпрж╝ржЧрж╛ржпрж╝ ржкрзЗрж╕рзНржЯ ржХрж░рзБржиред');
      });
    }
  };

  const handleBookingSubmit = () => {
    if (!bookingForm.name || !bookingForm.phone || !bookingForm.address || !bookingForm.ambulanceType) {
      alert('рж╕ржм ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рждржерзНржп ржкрзВрж░ржг ржХрж░рзБржи');
      return;
    }

    setBookingSubmitted(true);
    setShowBookingForm(false);
    
    // Reset form
    setBookingForm({
      name: '',
      phone: '',
      address: '',
      ambulanceType: '',
      patientCondition: '',
      urgency: 'ржЬрж░рзБрж░рж┐',
      notes: ''
    });
  };

  const submitFeedback = (rating: number, comment: string) => {
    setFeedback({ rating, comment });
    alert('ржзржирзНржпржмрж╛ржж! ржЖржкржирж╛рж░ ржлрж┐ржбржмрзНржпрж╛ржХ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред');
  };

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <Star
        key={i}
        className={`w-4 h-4 ${
          i < Math.floor(rating)
            ? 'text-yellow-400 fill-current'
            : 'text-gray-300'
        }`}
      />
    ));
  };

  return (
    <div className="min-h-screen py-8 px-4">
      <div className="container mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <motion.div 
            className="inline-flex items-center justify-center w-24 h-24 rounded-full bg-gradient-to-r from-red-500 to-orange-500 text-white mb-6 shadow-2xl"
            whileHover={{ scale: 1.1, rotate: 10 }}
            transition={{ type: "spring", stiffness: 400 }}
          >
            <Truck className="w-12 h-12" />
          </motion.div>
          <h1 className="text-5xl font-bold text-gray-800 mb-4">AmbulanceBot</h1>
          <p className="text-xl text-gray-600 max-w-4xl mx-auto leading-relaxed">
            ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ржпрж╝ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛ ржЦрзБржБржЬрзЗ ржкрж╛ржиред AI рж╕рж╣рж╛ржпрж╝рждрж╛ ржУ рж▓рж╛ржЗржн рж▓рзЛржХрзЗрж╢ржи рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржиред
          </p>
        </motion.div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Left Column - Main Content */}
          <div className="lg:col-span-2 space-y-8">
            {/* Auto Location Share Section */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.2 }}
              className="bg-gradient-to-r from-red-50 via-orange-50 to-yellow-50 rounded-3xl shadow-xl p-8 border border-red-200"
            >
              <div className="text-center mb-6">
                <motion.div
                  className="inline-flex items-center justify-center w-16 h-16 rounded-2xl bg-gradient-to-r from-red-500 to-orange-500 text-white mb-4 shadow-lg"
                  whileHover={{ scale: 1.1, rotate: 5 }}
                >
                  <MapPin className="w-8 h-8" />
                </motion.div>
                <h2 className="text-3xl font-bold text-red-800 mb-2">ржЬрж░рзБрж░рж┐ рж▓рзЛржХрзЗрж╢ржи рж╢рзЗржпрж╝рж╛рж░</h2>
                <p className="text-red-600">рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржи рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи</p>
              </div>
              
              {!userLocation ? (
                <div className="text-center">
                  <motion.button
                    onClick={getCurrentLocation}
                    disabled={isGettingLocation}
                    className="bg-gradient-to-r from-red-500 to-orange-500 text-white px-8 py-4 rounded-2xl font-bold text-lg hover:shadow-lg transition-all disabled:opacity-50 flex items-center space-x-3 mx-auto"
                    whileHover={{ scale: 1.05, y: -2 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    {isGettingLocation ? (
                      <>
                        <Loader2 className="w-6 h-6 animate-spin" />
                        <span>рж▓рзЛржХрзЗрж╢ржи ржЦрзБржБржЬржЫрж┐...</span>
                      </>
                    ) : (
                      <>
                        <Navigation className="w-6 h-6" />
                        <span>ЁЯЖШ ржЬрж░рзБрж░рж┐ рж▓рзЛржХрзЗрж╢ржи рж╢рзЗржпрж╝рж╛рж░</span>
                      </>
                    )}
                  </motion.button>
                  <p className="text-red-600 text-sm mt-4">
                    ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржЕржмрж╕рзНржерж╛ржи ржкрзЗрждрзЗ "Allow" ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи
                  </p>
                </div>
              ) : (
                <div className="space-y-6">
                  <div className="bg-white/60 rounded-2xl p-6 backdrop-blur-sm border border-red-200">
                    <div className="flex items-start space-x-4">
                      <motion.div
                        className="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-500 rounded-xl flex items-center justify-center text-white shadow-lg"
                        whileHover={{ rotate: 10, scale: 1.1 }}
                      >
                        <CheckCircle className="w-6 h-6" />
                      </motion.div>
                      <div className="flex-1">
                        <h3 className="font-bold text-red-800 mb-2">ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржЕржмрж╕рзНржерж╛ржи:</h3>
                        <p className="text-red-700 mb-2">{userLocation.address}</p>
                        <p className="text-red-600 text-sm">
                          Latitude: {userLocation.lat.toFixed(6)}, Longitude: {userLocation.lng.toFixed(6)}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="grid md:grid-cols-2 gap-4">
                    <motion.button
                      onClick={shareLocation}
                      className="bg-gradient-to-r from-red-500 to-pink-500 text-white py-4 rounded-2xl font-bold hover:shadow-lg transition-all flex items-center justify-center space-x-2"
                      whileHover={{ scale: 1.02, y: -2 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <Share2 className="w-5 h-5" />
                      <span>ржЬрж░рзБрж░рж┐ рж▓рзЛржХрзЗрж╢ржи рж╢рзЗржпрж╝рж╛рж░</span>
                    </motion.button>

                    <motion.a
                      href={`https://maps.google.com/?q=${userLocation.lat},${userLocation.lng}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white py-4 rounded-2xl font-bold hover:shadow-lg transition-all flex items-center justify-center space-x-2"
                      whileHover={{ scale: 1.02, y: -2 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <MapPin className="w-5 h-5" />
                      <span>Google Maps ржП ржжрзЗржЦрзБржи</span>
                    </motion.a>
                  </div>

                  {locationShared && shareMessage && (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="bg-green-50 rounded-2xl p-6 border border-green-200"
                    >
                      <div className="flex items-start justify-between mb-4">
                        <h3 className="font-bold text-green-800">рж╢рзЗржпрж╝рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд:</h3>
                        <motion.button
                          onClick={copyLocationText}
                          className="bg-green-500 text-white px-4 py-2 rounded-xl font-medium hover:bg-green-600 transition-all flex items-center space-x-2"
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          <Copy className="w-4 h-4" />
                          <span>ржХржкрж┐ ржХрж░рзБржи</span>
                        </motion.button>
                      </div>
                      <div className="bg-white rounded-xl p-4 border border-green-200">
                        <pre className="text-green-700 text-sm whitespace-pre-wrap font-mono">
                          {shareMessage}
                        </pre>
                      </div>
                    </motion.div>
                  )}
                </div>
              )}
            </motion.div>

            {/* Search and Filter */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.3 }}
              className="bg-white rounded-3xl shadow-xl p-6 border border-gray-100"
            >
              <div className="text-center mb-6">
                <motion.div
                  className="inline-flex items-center justify-center w-16 h-16 rounded-2xl bg-gradient-to-r from-blue-500 to-purple-500 text-white mb-4 shadow-lg"
                  whileHover={{ scale: 1.1, rotate: 5 }}
                >
                  <Search className="w-8 h-8" />
                </motion.div>
                <h2 className="text-3xl font-bold text-gray-800 mb-2">ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛ ржЦрзБржБржЬрзБржи</h2>
                <p className="text-gray-600">ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛рж░ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛ ржЦрзБржБржЬрзЗ ржирж┐ржи</p>
              </div>
              
              <div className="grid md:grid-cols-2 gap-6">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type="text"
                    placeholder="ржПрж▓рж╛ржХрж╛рж░ ржирж╛ржо ржмрж╛ рж╕рзЗржмрж╛рж░ ржирж╛ржо рж▓рж┐ржЦрзБржи..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-3 border border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <select
                  value={selectedDistrict}
                  onChange={(e) => setSelectedDistrict(e.target.value)}
                  className="px-4 py-3 border border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">рж╕ржм ржЬрзЗрж▓рж╛</option>
                  {districts.map(district => (
                    <option key={district} value={district}>{district}</option>
                  ))}
                </select>
              </div>
            </motion.div>

            {/* Ambulance Services Directory */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.4 }}
              className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100"
            >
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h2 className="text-xl font-bold text-gray-800">ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐</h2>
                  <p className="text-gray-600 text-sm">ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛рж░ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛</p>
                </div>
                <motion.button
                  onClick={() => setShowAddAmbulanceModal(true)}
                  className="bg-gradient-to-r from-blue-500 to-green-500 text-white px-4 py-2 rounded-xl font-medium text-sm hover:shadow-lg transition-all flex items-center space-x-2"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Plus className="w-4 h-4" />
                  <span>ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржпрзЛржЧ ржХрж░рзБржи</span>
                </motion.button>
              </div>
              
              <div className="grid md:grid-cols-3 gap-4">
                {filteredServices.map((service, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.1 * index }}
                    className="bg-gradient-to-br from-red-50 to-orange-50 rounded-xl p-4 border border-red-200 hover:shadow-md transition-all duration-300"
                    whileHover={{ scale: 1.02, y: -2 }}
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <h3 className="text-base font-bold text-gray-800 mb-1">{service.name}</h3>
                        <div className="flex items-center space-x-2 mb-1">
                          <span className="px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs font-medium">
                            {service.types[0]}
                          </span>
                          {service.available24x7 && (
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                              рзирзк/рзн
                            </span>
                          )}
                        </div>
                      </div>
                      {service.verified && (
                        <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                          <CheckCircle className="w-3 h-3 text-white" />
                        </div>
                      )}
                    </div>
                    
                    <div className="space-y-1 text-xs mb-3">
                      <div className="flex items-center text-gray-600">
                        <MapPin className="w-3 h-3 mr-1 text-red-500" />
                        <span>{service.area}</span>
                      </div>
                      <div className="flex items-center text-gray-600">
                        <Phone className="w-3 h-3 mr-1 text-green-500" />
                        <span>{service.phone}</span>
                      </div>
                      <div className="flex items-center text-gray-600">
                        <Star className="w-3 h-3 mr-1 text-blue-500" />
                        <span>{service.price}</span>
                      </div>
                      <div className="flex items-center text-gray-600">
                        <Clock className="w-3 h-3 mr-1 text-purple-500" />
                        <span>{service.responseTime}</span>
                      </div>
                    </div>
                    
                    <div className="flex space-x-1">
                      <motion.a
                        href={`tel:${service.phone}`}
                        className="flex-1 bg-green-500 text-white py-1 px-2 rounded-lg font-medium text-xs hover:bg-green-600 transition-all text-center"
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        ржХрж▓ ржХрж░рзБржи
                      </motion.a>
                      <motion.button
                        className="flex-1 bg-blue-500 text-white py-1 px-2 rounded-lg font-medium text-xs hover:bg-blue-600 transition-all"
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        ржмрзБржХ ржХрж░рзБржи
                      </motion.button>
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>

            {/* Ambulance Types */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.5 }}
              className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100"
            >
              <h2 className="text-xl font-bold text-gray-800 mb-4">ржПржорзНржмрзБрж▓рзЗржирзНрж╕рзЗрж░ ржзрж░ржи</h2>
              
              <div className="grid md:grid-cols-4 gap-4">
                {ambulanceTypes.map((type, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.1 * index }}
                    className={`text-center bg-gradient-to-br ${type.color} rounded-xl p-4 border border-gray-200 hover:shadow-md transition-all duration-300`}
                    whileHover={{ scale: 1.02, y: -2 }}
                  >
                    <div className="text-2xl mb-2">
                      {type.icon}
                    </div>
                    <h3 className="font-bold text-gray-800 mb-2 text-sm">{type.type}</h3>
                    <p className="text-gray-600 text-xs mb-2">{type.description}</p>
                    <div className="bg-white/60 rounded-lg p-2">
                      <p className="text-gray-700 font-medium text-xs">{type.price}</p>
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>

            {/* Emergency Tips */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.6 }}
              className="bg-yellow-50 rounded-2xl shadow-lg p-6 border border-yellow-200"
            >
              <h2 className="text-xl font-bold text-yellow-800 mb-4">ржЬрж░рзБрж░рж┐ ржЯрж┐ржкрж╕</h2>
              
              <div className="grid md:grid-cols-3 gap-4">
                {emergencyTips.map((tip, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.1 * index }}
                    className="bg-white/60 rounded-xl p-4 backdrop-blur-sm border border-yellow-200"
                  >
                    <div className={`w-8 h-8 bg-gradient-to-r ${tip.color} rounded-lg flex items-center justify-center text-white mb-3 shadow-md`}>
                      <tip.icon className="w-4 h-4" />
                    </div>
                    <h3 className="font-bold text-yellow-800 mb-3 text-sm">{tip.title}</h3>
                    <div className="space-y-1">
                      {tip.tips.map((item, i) => (
                        <div key={i} className="text-yellow-700 text-xs flex items-center">
                          <span className="w-2 h-2 bg-yellow-500 rounded-full mr-2"></span>
                          {item}
                        </div>
                      ))}
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>

            {/* Video Guides */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.7 }}
              className="bg-purple-50 rounded-2xl shadow-lg p-6 border border-purple-200"
            >
              <h2 className="text-xl font-bold text-purple-800 mb-4">ржнрж┐ржбрж┐ржУ ржЧрж╛ржЗржб</h2>
              
              <div className="grid md:grid-cols-3 gap-4">
                {videoGuides.map((video, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.1 * index }}
                    className="bg-white/60 rounded-xl p-4 backdrop-blur-sm border border-purple-200 hover:bg-white/80 transition-all duration-300 cursor-pointer"
                    whileHover={{ scale: 1.02, y: -2 }}
                  >
                    <div className="relative bg-gray-200 rounded-lg mb-3 h-20 flex items-center justify-center">
                      <motion.div
                        className="w-10 h-10 bg-purple-500 rounded-full flex items-center justify-center text-white shadow-lg"
                        whileHover={{ scale: 1.1 }}
                      >
                        <Play className="w-5 h-5 ml-1" />
                      </motion.div>
                    </div>
                    <h3 className="font-bold text-purple-800 mb-2 text-sm">{video.title}</h3>
                    <p className="text-purple-600 text-xs mb-2">{video.description}</p>
                    <div className="flex items-center justify-between">
                      <span className="text-purple-500 font-medium text-xs">{video.duration}</span>
                      <motion.button
                        className="bg-purple-500 text-white px-3 py-1 rounded-lg font-medium text-xs hover:bg-purple-600 transition-all flex items-center space-x-1"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        <Play className="w-3 h-3" />
                        <span>ржжрзЗржЦрзБржи</span>
                      </motion.button>
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          </div>

          {/* Right Column - AmbulanceBot Chat */}
          <div className="lg:col-span-1">
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.3 }}
              className="sticky top-8 space-y-6"
            >
              {/* AmbulanceBot Chat */}
              <div className="bg-white rounded-3xl shadow-2xl border border-gray-100 overflow-hidden min-h-[600px]">
                <div className="bg-gradient-to-r from-red-600 via-orange-600 to-yellow-600 text-white p-6 relative overflow-hidden">
                  <div className="absolute inset-0 bg-gradient-to-r from-red-400/20 to-yellow-400/20 animate-pulse" />
                  
                  <div className="relative flex items-center space-x-4">
                    <motion.div
                      className="w-16 h-16 bg-white/20 rounded-2xl flex items-center justify-center backdrop-blur-sm shadow-2xl"
                      whileHover={{ scale: 1.15, rotate: 15 }}
                      transition={{ type: "spring", stiffness: 400 }}
                    >
                      <Truck className="w-8 h-8" />
                    </motion.div>
                    <div>
                      <h3 className="text-2xl font-bold mb-2">AmbulanceBot</h3>
                      <p className="text-red-100 text-sm">ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛ рж╕рж╣рж╛ржпрж╝ржХ</p>
                    </div>
                  </div>
                </div>

                <div className="h-[350px] overflow-y-auto space-y-4 p-4 bg-gradient-to-br from-gray-50 to-red-50">
                  <AnimatePresence>
                    {messages.map((message) => (
                      <motion.div
                        key={message.id}
                        initial={{ opacity: 0, y: 20, scale: 0.95 }}
                        animate={{ opacity: 1, y: 0, scale: 1 }}
                        exit={{ opacity: 0, y: -20, scale: 0.95 }}
                        transition={{ type: "spring", stiffness: 500, damping: 30 }}
                        className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                      >
                        <div className={`flex items-start space-x-3 max-w-xs ${
                          message.sender === 'user' ? 'flex-row-reverse space-x-reverse' : ''
                        }`}>
                          <motion.div 
                            className={`w-8 h-8 rounded-xl flex items-center justify-center shadow-lg ${
                            message.sender === 'user' 
                              ? 'bg-gradient-to-r from-red-500 to-orange-500 text-white' 
                              : 'bg-gradient-to-r from-yellow-500 to-orange-500 text-white'
                            }`}
                            whileHover={{ scale: 1.1 }}
                          >
                            {message.sender === 'user' ? (
                              <User className="w-4 h-4" />
                            ) : (
                              <Bot className="w-4 h-4" />
                            )}
                          </motion.div>

                          <motion.div 
                            className={`rounded-2xl p-3 shadow-lg backdrop-blur-sm ${
                            message.sender === 'user'
                              ? 'bg-gradient-to-r from-red-500 to-orange-500 text-white'
                              : 'bg-white/80 text-gray-800 border border-gray-200'
                            }`}
                            whileHover={{ scale: 1.02 }}
                          >
                            <p className="text-xs leading-relaxed whitespace-pre-line">{message.text}</p>
                            <p className={`text-xs mt-2 ${
                              message.sender === 'user' ? 'text-red-100' : 'text-gray-500'
                            }`}>
                              {message.timestamp.toLocaleTimeString('bn-BD', { 
                                hour: '2-digit', 
                                minute: '2-digit' 
                              })}
                            </p>
                          </motion.div>
                        </div>
                      </motion.div>
                    ))}
                  </AnimatePresence>

                  {isLoading && (
                    <motion.div
                      initial={{ opacity: 0, scale: 0.8 }}
                      animate={{ opacity: 1, scale: 1 }}
                      className="flex justify-start"
                    >
                      <div className="flex items-center space-x-3">
                        <div className="w-8 h-8 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-xl flex items-center justify-center">
                          <Bot className="w-4 h-4 text-white" />
                        </div>
                        <div className="bg-white/80 rounded-2xl p-3 shadow-lg backdrop-blur-sm border border-gray-200">
                          <div className="flex items-center space-x-2">
                            <Loader2 className="w-3 h-3 animate-spin text-red-500" />
                            <span className="text-xs text-gray-600">ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░ржЫрж┐...</span>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  )}

                  <div ref={messagesEndRef} />
                </div>

                <div className="border-t border-gray-200 p-4 bg-white">
                  {isRecording && (
                    <motion.div
                      initial={{ opacity: 0, scale: 0.9 }}
                      animate={{ opacity: 1, scale: 1 }}
                      className="mb-3 flex items-center justify-center space-x-2 text-red-500 bg-red-50 rounded-xl p-2"
                    >
                      <motion.div 
                        className="w-2 h-2 bg-red-500 rounded-full"
                        animate={{ scale: [1, 1.2, 1] }}
                        transition={{ repeat: Infinity, duration: 1 }}
                      />
                      <span className="text-xs font-medium">рж░рзЗржХрж░рзНржб ржХрж░ржЫрж┐... {formatTime(recordingTime)}</span>
                    </motion.div>
                  )}

                  <div className="flex items-center space-x-2">
                    <div className="flex-1 relative">
                      <input
                        type="text"
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                        placeholder="ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи..."
                        className="w-full p-3 bg-gray-50 border border-gray-200 rounded-2xl focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all text-sm"
                        disabled={isLoading}
                      />
                    </div>

                    <motion.button
                      className={`p-2 rounded-xl transition-colors ${
                        isRecording 
                          ? 'bg-red-500 text-white hover:bg-red-600' 
                          : 'text-orange-600 hover:bg-orange-50'
                      }`}
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                      onMouseDown={startRecording}
                      onMouseUp={stopRecording}
                      onMouseLeave={stopRecording}
                    >
                      {isRecording ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
                    </motion.button>

                    <motion.button
                      className="p-2 bg-gradient-to-r from-red-500 to-orange-500 text-white rounded-xl hover:from-red-600 hover:to-orange-600 transition-all disabled:opacity-50 shadow-lg"
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                      onClick={handleSendMessage}
                      disabled={!input.trim() || isLoading}
                    >
                      <Send className="w-4 h-4" />
                    </motion.button>
                  </div>
                </div>
              </div>

              {/* Emergency Call Button */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.5 }}
              >
                <motion.a
                  href="tel:999"
                  className="w-full bg-gradient-to-r from-red-600 to-red-700 text-white py-6 rounded-3xl font-bold text-xl hover:shadow-2xl transition-all flex items-center justify-center space-x-3 block"
                  whileHover={{ scale: 1.02, y: -2 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Phone className="w-8 h-8" />
                  <span>ЁЯЖШ ржЬрж░рзБрж░рж┐ ржХрж▓ (рзпрзпрзп)</span>
                </motion.a>
              </motion.div>

              {/* Quick Booking Button */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.6 }}
              >
                <motion.button
                  onClick={() => setShowBookingForm(true)}
                  className="w-full bg-gradient-to-r from-blue-500 to-purple-500 text-white py-4 rounded-2xl font-bold hover:shadow-lg transition-all flex items-center justify-center space-x-2"
                  whileHover={{ scale: 1.02, y: -2 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Calendar className="w-5 h-5" />
                  <span>ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржмрзБржХ ржХрж░рзБржи</span>
                </motion.button>
              </motion.div>
            </motion.div>
          </div>
        </div>

        {/* Add Ambulance Modal */}
        <AnimatePresence>
          {showAddAmbulanceModal && (
            <>
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
                onClick={() => setShowAddAmbulanceModal(false)}
              />
              
              <motion.div
                initial={{ opacity: 0, scale: 0.8, y: 50 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.8, y: 50 }}
                transition={{ type: "spring", damping: 25, stiffness: 300 }}
                className="fixed inset-4 md:inset-8 lg:inset-16 bg-white rounded-3xl shadow-2xl z-50 overflow-hidden max-h-[90vh] overflow-y-auto"
              >
                {/* Modal Header */}
                <div className="bg-gradient-to-r from-blue-500 to-green-500 text-white p-8 relative overflow-hidden">
                  <div className="absolute inset-0 bg-gradient-to-r from-blue-400/20 to-green-400/20 animate-pulse" />
                  <div className="relative flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <motion.div
                        className="w-16 h-16 bg-white/20 rounded-2xl flex items-center justify-center backdrop-blur-sm"
                        whileHover={{ scale: 1.1, rotate: 10 }}
                      >
                        <Truck className="w-8 h-8" />
                      </motion.div>
                      <div>
                        <h3 className="text-3xl font-bold">ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛ ржпрзЛржЧ ржХрж░рзБржи</h3>
                        <p className="text-blue-100 text-lg">ржирждрзБржи ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛ ржирж┐ржмржирзНржзржи ржХрж░рзБржи</p>
                      </div>
                    </div>
                    <motion.button
                      onClick={() => setShowAddAmbulanceModal(false)}
                      className="w-12 h-12 bg-white/20 rounded-2xl flex items-center justify-center backdrop-blur-sm hover:bg-white/30 transition-colors"
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                    >
                      <X className="w-6 h-6" />
                    </motion.button>
                  </div>
                </div>

                {/* Modal Content */}
                <div className="p-8">
                  <div className="grid md:grid-cols-2 gap-6">
                    {/* Service Information */}
                    <div className="space-y-6">
                      <h4 className="text-2xl font-bold text-gray-800 mb-4">рж╕рзЗржмрж╛рж░ рждржерзНржп</h4>
                      
                      <div>
                        <label className="block text-lg font-medium text-gray-700 mb-2">рж╕рзЗржмрж╛рж░ ржирж╛ржо *</label>
                        <input
                          type="text"
                          value={newAmbulance.name}
                          onChange={(e) => setNewAmbulance(prev => ({ ...prev, name: e.target.value }))}
                          className="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-4 focus:ring-blue-300 focus:border-blue-500"
                          placeholder="ржпрзЗржоржи: ржврж╛ржХрж╛ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ рж╕рзЗржмрж╛"
                        />
                      </div>

                      <div>
                        <label className="block text-lg font-medium text-gray-700 mb-2">ржлрзЛржи ржиржорзНржмрж░ *</label>
                        <input
                          type="tel"
                          value={newAmbulance.phone}
                          onChange={(e) => setNewAmbulance(prev => ({ ...prev, phone: e.target.value }))}
                          className="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-4 focus:ring-blue-300 focus:border-blue-500"
                          placeholder="рзжрззрзнxxxxxxxx"
                        />
                      </div>

                      <div>
                        <label className="block text-lg font-medium text-gray-700 mb-2">ржПрж▓рж╛ржХрж╛ *</label>
                        <input
                          type="text"
                          value={newAmbulance.area}
                          onChange={(e) => setNewAmbulance(prev => ({ ...prev, area: e.target.value }))}
                          className="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-4 focus:ring-blue-300 focus:border-blue-500"
                          placeholder="ржпрзЗржоржи: ржврж╛ржХрж╛, ржЪржЯрзНржЯржЧрзНрж░рж╛ржо"
                        />
                      </div>
                    </div>

                    {/* Service Details */}
                    <div className="space-y-6">
                      <h4 className="text-2xl font-bold text-gray-800 mb-4">рж╕рзЗржмрж╛рж░ ржмрж┐ржмрж░ржг</h4>
                      
                      <div>
                        <label className="block text-lg font-medium text-gray-700 mb-2">ржПржорзНржмрзБрж▓рзЗржирзНрж╕рзЗрж░ ржзрж░ржи *</label>
                        <select
                          value={newAmbulance.type}
                          onChange={(e) => setNewAmbulance(prev => ({ ...prev, type: e.target.value }))}
                          className="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-4 focus:ring-blue-300 focus:border-blue-500"
                        >
                          <option value="Regular">Regular Ambulance</option>
                          <option value="AC">AC Ambulance</option>
                          <option value="ICU">ICU/CCU Ambulance</option>
                          <option value="Freezer">Dead Body Freezer Van</option>
                        </select>
                      </div>

                      <div>
                        <label className="block text-lg font-medium text-gray-700 mb-2">ржорзВрж▓рзНржп *</label>
                        <input
                          type="text"
                          value={newAmbulance.price}
                          onChange={(e) => setNewAmbulance(prev => ({ ...prev, price: e.target.value }))}
                          className="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-4 focus:ring-blue-300 focus:border-blue-500"
                          placeholder="ржпрзЗржоржи: рзлрзжрзж-рззрзжрзжрзж ржЯрж╛ржХрж╛"
                        />
                      </div>

                      <div>
                        <label className="block text-lg font-medium text-gray-700 mb-2">рж░рзЗрж╕ржкржирзНрж╕ ржЯрж╛ржЗржо</label>
                        <input
                          type="text"
                          value={newAmbulance.responseTime}
                          onChange={(e) => setNewAmbulance(prev => ({ ...prev, responseTime: e.target.value }))}
                          className="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:outline-none focus:ring-4 focus:ring-blue-300 focus:border-blue-500"
                          placeholder="ржпрзЗржоржи: рззрзл-рзирзж ржорж┐ржирж┐ржЯ"
                        />
                      </div>

                      <div className="flex items-center">
                        <input
                          type="checkbox"
                          id="available24"
                          checked={newAmbulance.available24}
                          onChange={(e) => setNewAmbulance(prev => ({ ...prev, available24: e.target.checked }))}
                          className="w-5 h-5 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                        />
                        <label htmlFor="available24" className="ml-3 text-lg font-medium text-gray-700">
                          рзирзк/рзн ржЙржкрж▓ржмрзНржз
                        </label>
                      </div>
                    </div>
                  </div>

                  {/* Submit Button */}
                  <div className="mt-8 flex justify-end space-x-4">
                    <motion.button
                      onClick={() => setShowAddAmbulanceModal(false)}
                      className="px-8 py-4 bg-gray-100 text-gray-700 rounded-2xl font-bold text-lg hover:bg-gray-200 transition-all"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      ржмрж╛рждрж┐рж▓
                    </motion.button>
                    <motion.button
                      onClick={handleSubmitAmbulance}
                      className="px-8 py-4 bg-gradient-to-r from-blue-500 to-green-500 text-white rounded-2xl font-bold text-lg hover:shadow-2xl transition-all flex items-center space-x-2"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <CheckCircle className="w-6 h-6" />
                      <span>ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржпрзЛржЧ ржХрж░рзБржи</span>
                    </motion.button>
                  </div>
                </div>
              </motion.div>
            </>
          )}
        </AnimatePresence>

        {/* Booking Form Modal */}
        <AnimatePresence>
          {showBookingForm && (
            <>
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
                onClick={() => setShowBookingForm(false)}
              />
              
              <motion.div
                initial={{ opacity: 0, scale: 0.8, y: 50 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.8, y: 50 }}
                transition={{ type: "spring", damping: 25, stiffness: 300 }}
                className="fixed inset-4 md:inset-8 lg:inset-16 bg-white rounded-3xl shadow-2xl z-50 overflow-hidden max-h-[90vh] overflow-y-auto"
              >
                <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white p-6 relative overflow-hidden">
                  <div className="relative flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <motion.div
                        className="w-16 h-16 bg-white/20 rounded-2xl flex items-center justify-center backdrop-blur-sm"
                        whileHover={{ scale: 1.1, rotate: 10 }}
                      >
                        <Calendar className="w-8 h-8" />
                      </motion.div>
                      <div>
                        <h3 className="text-2xl font-bold">ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржмрзБржХрж┐ржВ</h3>
                        <p className="text-blue-100">ржЖржЧрзЗ ржерзЗржХрзЗ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржмрзБржХ ржХрж░рзБржи</p>
                      </div>
                    </div>
                    <motion.button
                      onClick={() => setShowBookingForm(false)}
                      className="w-10 h-10 bg-white/20 rounded-xl flex items-center justify-center backdrop-blur-sm hover:bg-white/30 transition-colors"
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                    >
                      <X className="w-5 h-5" />
                    </motion.button>
                  </div>
                </div>

                <div className="p-6">
                  <div className="grid md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                      <h4 className="text-xl font-bold text-gray-800">ржмрзНржпржХрзНрждрж┐ржЧржд рждржерзНржп</h4>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">ржирж╛ржо *</label>
                        <input
                          type="text"
                          value={bookingForm.name}
                          onChange={(e) => setBookingForm(prev => ({ ...prev, name: e.target.value }))}
                          className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="ржЖржкржирж╛рж░ ржкрзВрж░рзНржг ржирж╛ржо"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">ржорзЛржмрж╛ржЗрж▓ ржиржорзНржмрж░ *</label>
                        <input
                          type="tel"
                          value={bookingForm.phone}
                          onChange={(e) => setBookingForm(prev => ({ ...prev, phone: e.target.value }))}
                          className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="рзжрззрзнxxxxxxxx"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">ржарж┐ржХрж╛ржирж╛ *</label>
                        <textarea
                          value={bookingForm.address}
                          onChange={(e) => setBookingForm(prev => ({ ...prev, address: e.target.value }))}
                          className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 h-20 resize-none"
                          placeholder="ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржарж┐ржХрж╛ржирж╛ рж▓рж┐ржЦрзБржи"
                        />
                      </div>
                    </div>

                    <div className="space-y-4">
                      <h4 className="text-xl font-bold text-gray-800">рж╕рзЗржмрж╛рж░ рждржерзНржп</h4>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">ржПржорзНржмрзБрж▓рзЗржирзНрж╕рзЗрж░ ржзрж░ржи *</label>
                        <select
                          value={bookingForm.ambulanceType}
                          onChange={(e) => setBookingForm(prev => ({ ...prev, ambulanceType: e.target.value }))}
                          className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="">ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи</option>
                          {ambulanceTypes.map(type => (
                            <option key={type.type} value={type.type}>{type.type}</option>
                          ))}
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛</label>
                        <select
                          value={bookingForm.urgency}
                          onChange={(e) => setBookingForm(prev => ({ ...prev, urgency: e.target.value }))}
                          className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="ржЬрж░рзБрж░рж┐">ржЬрж░рзБрж░рж┐</option>
                          <option value="ржЕрждрж┐ ржЬрж░рзБрж░рж┐">ржЕрждрж┐ ржЬрж░рзБрж░рж┐</option>
                          <option value="ржкрж░рж┐ржХрж▓рзНржкрж┐ржд">ржкрж░рж┐ржХрж▓рзНржкрж┐ржд</option>
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">рж░рзЛржЧрзАрж░ ржЕржмрж╕рзНржерж╛</label>
                        <input
                          type="text"
                          value={bookingForm.patientCondition}
                          onChange={(e) => setBookingForm(prev => ({ ...prev, patientCondition: e.target.value }))}
                          className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="ржпрзЗржоржи: рж╣рж╛рж░рзНржЯ ржЕрзНржпрж╛ржЯрж╛ржХ, ржжрзБрж░рзНржШржЯржирж╛"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">ржЕрждрж┐рж░рж┐ржХрзНржд рждржерзНржп</label>
                        <textarea
                          value={bookingForm.notes}
                          onChange={(e) => setBookingForm(prev => ({ ...prev, notes: e.target.value }))}
                          className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 h-20 resize-none"
                          placeholder="ржЕржирзНржп ржХрзЛржи ржмрж┐рж╢рзЗрж╖ рждржерзНржп"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="mt-6 flex justify-end space-x-4">
                    <motion.button
                      onClick={() => setShowBookingForm(false)}
                      className="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl font-medium hover:bg-gray-200 transition-all"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      ржмрж╛рждрж┐рж▓
                    </motion.button>
                    <motion.button
                      onClick={handleBookingSubmit}
                      className="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-xl font-medium hover:shadow-lg transition-all flex items-center space-x-2"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <CheckCircle className="w-5 h-5" />
                      <span>ржмрзБржХрж┐ржВ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи</span>
                    </motion.button>
                  </div>
                </div>
              </motion.div>
            </>
          )}
        </AnimatePresence>

        {/* Booking Success Modal */}
        <AnimatePresence>
          {bookingSubmitted && (
            <>
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
                onClick={() => setBookingSubmitted(false)}
              />
              
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                className="fixed inset-4 md:inset-1/4 bg-white rounded-3xl shadow-2xl z-50 flex items-center justify-center"
              >
                <div className="text-center p-8">
                  <motion.div
                    className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-green-100 text-green-600 mb-6"
                    animate={{ scale: [1, 1.1, 1] }}
                    transition={{ repeat: 3, duration: 0.5 }}
                  >
                    <CheckCircle className="w-10 h-10" />
                  </motion.div>
                  <h3 className="text-2xl font-bold text-green-800 mb-4">ржмрзБржХрж┐ржВ рж╕ржлрж▓!</h3>
                  <p className="text-green-600 text-lg mb-6">
                    ржЖржкржирж╛рж░ ржПржорзНржмрзБрж▓рзЗржирзНрж╕ ржмрзБржХрж┐ржВ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗред ржЖржорж░рж╛ рж╢рзАржШрзНрж░ржЗ ржЖржкржирж╛рж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░ржмред
                  </p>
                  <motion.button
                    onClick={() => setBookingSubmitted(false)}
                    className="bg-gradient-to-r from-green-500 to-emerald-500 text-white px-8 py-3 rounded-2xl font-bold hover:shadow-lg transition-all"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    ржзржирзНржпржмрж╛ржж
                  </motion.button>
                </div>
              </motion.div>
            </>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default AmbulancePage;
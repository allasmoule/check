import React from 'react';
import { motion } from 'framer-motion';
import { Stethoscope, Heart, AlertTriangle, Shield } from 'lucide-react';
import AIChat from '../components/AIChat';

const AnimalTreatmentPage: React.FC = () => {
  const animalTypes = [
    {
      name: 'ржЧрж░рзБ',
      diseases: ['ржЬрзНржмрж░', 'ржбрж╛ржпрж╝рж░рж┐ржпрж╝рж╛', 'ржорзБржЦ ржУ ржкрж╛ржпрж╝рзЗ ржХрзНрж╖ржд', 'ржХрж╛рж╢рж┐'],
      prevention: ['ржЯрж┐ржХрж╛ ржжрзЗржУржпрж╝рж╛', 'ржкрж░рж┐рж╖рзНржХрж╛рж░ ржкрж╛ржирж┐', 'рж╕рзБрж╖ржо ржЦрж╛ржмрж╛рж░', 'ржирж┐ржпрж╝ржорж┐ржд ржкрж░рж┐рж╖рзНржХрж╛рж░'],
      color: 'from-brown-500 to-amber-600',
      bgColor: 'from-brown-50 to-amber-50',
      icon: 'ЁЯРД'
    },
    {
      name: 'ржЫрж╛ржЧрж▓',
      diseases: ['PPR', 'ржХрзГржорж┐', 'ржЖржирзНрждрзНрж░рж┐ржХ рж╕ржорж╕рзНржпрж╛', 'ржЪрж░рзНржорж░рзЛржЧ'],
      prevention: ['ржХрзГржорж┐рж░ ржУрж╖рзБржз', 'ржкрж░рж┐рж╖рзНржХрж╛рж░ ржЬрж╛ржпрж╝ржЧрж╛', 'рж╕ржоржпрж╝ржорждрзЛ ржЯрж┐ржХрж╛', 'рж╕рзБрж╖ржо ржЦрж╛ржмрж╛рж░'],
      color: 'from-gray-500 to-slate-600',
      bgColor: 'from-gray-50 to-slate-50',
      icon: 'ЁЯРР'
    },
    {
      name: 'ржорзБрж░ржЧрж┐',
      diseases: ['рж░рж╛ржгрзАржХрзНрж╖рзЗржд', 'ржХржХрзНрж╕рж┐ржбрж┐ржпрж╝рж╛', 'ржЧрж╛ржоржмрзЛрж░рзЛ', 'ржлрж╛ржЙрж▓ ржкржХрзНрж╕'],
      prevention: ['ржЯрж┐ржХрж╛ ржХрж╛рж░рзНржпржХрзНрж░ржо', 'ржкрж░рж┐рж╖рзНржХрж╛рж░ ржЦрж╛ржБржЪрж╛', 'ржЬрзАржмрж╛ржгрзБржорзБржХрзНржд ржкрж╛ржирж┐', 'рж╕рзБрж╖ржо ржЦрж╛ржмрж╛рж░'],
      color: 'from-orange-500 to-red-500',
      bgColor: 'from-orange-50 to-red-50',
      icon: 'ЁЯРФ'
    },
    {
      name: 'ржорж╛ржЫ',
      diseases: ['EUS', 'рж╢рзНржмрж╛рж╕ржХрж╖рзНржЯ', 'ржкрзЗржЯ ржлрзЛрж▓рж╛', 'ржкрж╛ржЦржирж╛ ржкржЪрж╛'],
      prevention: ['ржкрж╛ржирж┐рж░ ржЧрзБржгржорж╛ржи', 'рж╕ржарж┐ржХ ржЦрж╛ржмрж╛рж░', 'ржирж┐ржпрж╝ржорж┐ржд ржкрж░рж┐рж╖рзНржХрж╛рж░', 'ржШржирждрзНржм ржирж┐ржпрж╝ржирзНрждрзНрж░ржг'],
      color: 'from-blue-500 to-cyan-500',
      bgColor: 'from-blue-50 to-cyan-50',
      icon: 'ЁЯРЯ'
    }
  ];

  const emergencySignals = [
    {
      icon: AlertTriangle,
      title: 'ржЬрж░рзБрж░рж┐ рж▓ржХрзНрж╖ржг',
      signs: ['рж╣ржарж╛рзО ржЦрж╛ржмрж╛рж░ ржмржирзНржз', 'рж╢рзНржмрж╛рж╕ржХрж╖рзНржЯ', 'ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржЖржЪрж░ржг', 'ржорж╛рждрзНрж░рж╛рждрж┐рж░рж┐ржХрзНржд ржЬрзНржмрж░'],
      color: 'from-red-500 to-orange-500'
    },
    {
      icon: Heart,
      title: 'ржкрзНрж░рж╛ржержорж┐ржХ ржЪрж┐ржХрж┐рзОрж╕рж╛',
      signs: ['ржЖрж▓рж╛ржжрж╛ рж░рж╛ржЦрзБржи', 'ржкрж╛ржирж┐ ржжрж┐ржи', 'ржарж╛ржирзНржбрж╛ ржЬрж╛ржпрж╝ржЧрж╛ржпрж╝ рж░рж╛ржЦрзБржи', 'ржкрж╢рзБ ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржХрж╛ржЫрзЗ ржирж┐ржи'],
      color: 'from-green-500 to-emerald-500'
    },
    {
      icon: Shield,
      title: 'ржкрзНрж░рждрж┐рж░рзЛржз',
      signs: ['ржирж┐ржпрж╝ржорж┐ржд ржЯрж┐ржХрж╛', 'ржкрж░рж┐рж╖рзНржХрж╛рж░ ржкрж░рж┐ржмрзЗрж╢', 'рж╕рзБрж╖ржо ржЦрж╛ржмрж╛рж░', 'рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рзАржХрзНрж╖рж╛'],
      color: 'from-blue-500 to-indigo-500'
    }
  ];

  const vaccinationSchedule = [
    { 
      animal: 'ржЧрж░рзБ ржУ ржЫрж╛ржЧрж▓', 
      vaccines: [
        { name: 'рждржбрж╝ржХрж╛', schedule: 'рзм ржорж╛рж╕ ржкрж░ ржкрж░', color: 'bg-red-500' },
        { name: 'ржорзБржЦ ржУ ржкрж╛ржпрж╝рзЗрж░ ржХрзНрж╖ржд', schedule: 'ржмржЫрж░рзЗ рзи ржмрж╛рж░', color: 'bg-orange-500' },
        { name: 'PPR (ржЫрж╛ржЧрж▓)', schedule: 'рзй ржмржЫрж░ ржкрж░ ржкрж░', color: 'bg-yellow-500' }
      ]
    },
    { 
      animal: 'ржорзБрж░ржЧрж┐', 
      vaccines: [
        { name: 'рж░рж╛ржгрзАржХрзНрж╖рзЗржд', schedule: 'рзн ржжрж┐ржи ржмржпрж╝рж╕рзЗ', color: 'bg-green-500' },
        { name: 'ржЧрж╛ржоржмрзЛрж░рзЛ', schedule: 'рззрзк ржжрж┐ржи ржмржпрж╝рж╕рзЗ', color: 'bg-blue-500' },
        { name: 'ржлрж╛ржЙрж▓ ржкржХрзНрж╕', schedule: 'рзо рж╕ржкрзНрждрж╛рж╣рзЗ', color: 'bg-purple-500' }
      ]
    }
  ];

  return (
    <div className="min-h-screen py-8 px-4">
      <div className="container mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white mb-6">
            <Stethoscope className="w-10 h-10" />
          </div>
          <h1 className="text-4xl font-bold text-gray-800 mb-4">ржкрж╢рзБ ржЪрж┐ржХрж┐рзОрж╕рж╛</h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            ржкрж╢рзБ ржкрж╛ржЦрж┐рж░ рж░рзЛржЧ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржПржмржВ рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢
          </p>
        </motion.div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Left Column - Animal Treatment Info */}
          <div className="lg:col-span-2 space-y-6">
            {/* Compact Animal Types */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.2 }}
              className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100"
            >
              <h2 className="text-2xl font-bold text-gray-800 mb-4">ржкрж╢рзБ ржкрж╛ржЦрж┐рж░ рж░рзЛржЧ</h2>
              <div className="grid md:grid-cols-2 gap-4">
                {animalTypes.map((animal, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.1 * index }}
                    className={`group relative bg-gradient-to-br ${animal.bgColor} rounded-2xl p-4 border border-green-200 hover:shadow-lg transition-all duration-300 overflow-hidden`}
                    whileHover={{ 
                      scale: 1.02, 
                      y: -3,
                      boxShadow: '0 15px 30px rgba(34, 197, 94, 0.15)'
                    }}
                    style={{
                      transform: 'perspective(500px) rotateX(1deg)',
                    }}
                  >
                    {/* 3D Background Effect */}
                    <div className={`absolute inset-0 bg-gradient-to-r ${animal.color} opacity-0 group-hover:opacity-5 transition-opacity duration-300`} />
                    
                    {/* Animal Icon */}
                    <motion.div
                      className="text-4xl mb-3 text-center"
                      whileHover={{ scale: 1.2, rotate: 10 }}
                      transition={{ type: "spring", stiffness: 400 }}
                    >
                      {animal.icon}
                    </motion.div>
                    
                    <h3 className="text-lg font-bold text-gray-800 mb-3 text-center group-hover:text-green-600 transition-colors">
                      {animal.name}
                    </h3>
                    
                    <div className="mb-3">
                      <h4 className="font-semibold text-gray-700 mb-2 text-sm flex items-center justify-center">
                        <span className="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
                        рж╕рж╛ржзрж╛рж░ржг рж░рзЛржЧ:
                      </h4>
                      <div className="space-y-1">
                        {animal.diseases.map((disease, i) => (
                          <div key={i} className="text-gray-600 text-xs bg-white/60 rounded-lg p-2 text-center">
                            {disease}
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    <div>
                      <h4 className="font-semibold text-gray-700 mb-2 text-sm flex items-center justify-center">
                        <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                        ржкрзНрж░рждрж┐рж░рзЛржз:
                      </h4>
                      <div className="space-y-1">
                        {animal.prevention.map((prevention, i) => (
                          <div key={i} className="text-gray-600 text-xs bg-white/60 rounded-lg p-2 text-center">
                            {prevention}
                          </div>
                        ))}
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>

            {/* Compact Emergency Signals */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.4 }}
              className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100"
            >
              <h2 className="text-2xl font-bold text-gray-800 mb-4">ржЬрж░рзБрж░рж┐ рждржерзНржп</h2>
              <div className="grid md:grid-cols-3 gap-4">
                {emergencySignals.map((signal, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.1 * index }}
                    className={`group text-center bg-gradient-to-br from-green-50 to-emerald-50 rounded-2xl p-4 hover:shadow-lg transition-all duration-300 border border-green-100`}
                    whileHover={{ 
                      scale: 1.05, 
                      y: -3,
                      boxShadow: '0 15px 30px rgba(34, 197, 94, 0.1)'
                    }}
                  >
                    <motion.div 
                      className={`w-12 h-12 bg-gradient-to-r ${signal.color} rounded-xl flex items-center justify-center text-white mx-auto mb-3 shadow-lg`}
                      whileHover={{ rotate: 10, scale: 1.1 }}
                      transition={{ type: "spring", stiffness: 400 }}
                    >
                      <signal.icon className="w-6 h-6" />
                    </motion.div>
                    <h3 className="font-bold text-gray-800 mb-3 text-sm group-hover:text-green-600 transition-colors">
                      {signal.title}
                    </h3>
                    <div className="space-y-1">
                      {signal.signs.map((sign, i) => (
                        <div key={i} className="text-gray-600 text-xs bg-white/60 rounded-lg p-2">
                          тАв {sign}
                        </div>
                      ))}
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>

            {/* Enhanced 3D Vaccination Schedule */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.6 }}
              className="bg-gradient-to-br from-purple-50 via-indigo-50 to-blue-50 rounded-3xl shadow-2xl p-8 border-2 border-purple-200 relative overflow-hidden"
              style={{
                transform: 'perspective(1000px) rotateX(2deg)',
                transformStyle: 'preserve-3d'
              }}
            >
              {/* 3D Background Effects */}
              <div className="absolute inset-0 bg-gradient-to-r from-purple-400/5 to-blue-400/5 animate-pulse" />
              
              {/* Floating particles */}
              <div className="absolute top-4 right-4 w-3 h-3 bg-purple-300/50 rounded-full animate-bounce" />
              <div className="absolute bottom-6 left-6 w-2 h-2 bg-indigo-300/50 rounded-full animate-pulse" />
              <div className="absolute top-1/2 right-8 w-1.5 h-1.5 bg-blue-300/50 rounded-full animate-ping" />
              
              <div className="relative">
                <div className="text-center mb-8">
                  <motion.div
                    className="inline-flex items-center justify-center w-20 h-20 rounded-3xl bg-gradient-to-r from-purple-500 via-indigo-500 to-blue-500 text-white mb-6 shadow-2xl"
                    whileHover={{ 
                      scale: 1.15, 
                      rotate: 15,
                      boxShadow: '0 25px 50px rgba(99, 102, 241, 0.4)'
                    }}
                    transition={{ type: "spring", stiffness: 400 }}
                    style={{
                      transform: 'perspective(500px) rotateX(10deg)',
                    }}
                  >
                    <span className="text-3xl">ЁЯТЙ</span>
                  </motion.div>
                  <h2 className="text-4xl font-bold text-purple-800 mb-3">ржЯрж┐ржХрж╛ рж╕рзВржЪрж┐</h2>
                  <p className="text-purple-600 text-xl">ржкрж╢рзБ ржкрж╛ржЦрж┐рж░ ржЯрж┐ржХрж╛рж░ рж╕ржоржпрж╝рж╕рзВржЪрж┐</p>
                </div>
                
                <div className="space-y-8">
                  {vaccinationSchedule.map((schedule, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 20, rotateX: 10 }}
                      animate={{ opacity: 1, y: 0, rotateX: 0 }}
                      transition={{ delay: 0.2 * index, type: "spring", stiffness: 200 }}
                      className="group bg-white/70 backdrop-blur-sm rounded-3xl p-8 border-2 border-purple-200/50 hover:bg-white/90 transition-all duration-500 hover:shadow-2xl"
                      whileHover={{ 
                        scale: 1.02, 
                        y: -8,
                        rotateY: 2,
                        boxShadow: '0 30px 60px rgba(147, 51, 234, 0.2)'
                      }}
                      style={{
                        transform: 'perspective(800px) rotateX(1deg)',
                        transformStyle: 'preserve-3d'
                      }}
                    >
                      <div className="flex items-center mb-6">
                        <motion.div
                          className="w-16 h-16 bg-gradient-to-r from-purple-500 to-indigo-500 rounded-2xl flex items-center justify-center text-white font-bold text-xl shadow-xl mr-6"
                          whileHover={{ rotate: 15, scale: 1.1 }}
                          transition={{ type: "spring", stiffness: 400 }}
                        >
                          {index + 1}
                        </motion.div>
                        <div>
                          <h3 className="text-2xl font-bold text-purple-700 group-hover:text-purple-600 transition-colors">
                            {schedule.animal}
                          </h3>
                          <p className="text-purple-600">ржЯрж┐ржХрж╛ ржХрж╛рж░рзНржпржХрзНрж░ржо</p>
                        </div>
                      </div>
                      
                      <div className="grid md:grid-cols-3 gap-4">
                        {schedule.vaccines.map((vaccine, i) => (
                          <motion.div
                            key={i}
                            initial={{ opacity: 0, scale: 0.8 }}
                            animate={{ opacity: 1, scale: 1 }}
                            transition={{ delay: 0.1 * i, type: "spring", stiffness: 300 }}
                            className="bg-white/80 rounded-2xl p-6 border border-purple-200/50 hover:shadow-lg transition-all duration-300"
                            whileHover={{ 
                              scale: 1.05, 
                              y: -3,
                              boxShadow: '0 15px 30px rgba(147, 51, 234, 0.1)'
                            }}
                          >
                            <div className="flex items-center mb-3">
                              <motion.div
                                className={`w-4 h-4 ${vaccine.color} rounded-full mr-3 shadow-sm`}
                                whileHover={{ scale: 1.2 }}
                              />
                              <h4 className="font-bold text-purple-800 text-lg">{vaccine.name}</h4>
                            </div>
                            <p className="text-purple-600 bg-purple-50 rounded-xl p-3 text-center font-medium">
                              {vaccine.schedule}
                            </p>
                          </motion.div>
                        ))}
                      </div>
                      
                      {/* Hover Effect Border */}
                      <div className="absolute inset-0 rounded-3xl border-2 border-transparent group-hover:border-purple-300 transition-colors duration-300" />
                    </motion.div>
                  ))}
                </div>
              </div>
            </motion.div>
          </div>

          {/* Right Column - AI Chat */}
          <div className="lg:col-span-1">
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.3 }}
              className="sticky top-8"
            >
              <AIChat
                title="ржкрж╢рзБ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрж░рж╛ржорж░рзНрж╢"
                placeholder="ржкрж╢рзБ ржкрж╛ржЦрж┐рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи..."
                context="animal-treatment"
              />
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AnimalTreatmentPage;